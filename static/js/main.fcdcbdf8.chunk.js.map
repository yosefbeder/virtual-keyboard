{"version":3,"sources":["../../src/components/Key.tsx","../../src/data/variants.ts","../../src/containers/Keyboard.tsx","App.js","index.js"],"names":["IconsMap","Map","React","Key","props","emptyFunction","onDown","onPress","onUp","className","classes","key","test","content","onMouseDown","onPressTimeout","setTimeout","onPressInterval","setInterval","window","clearTimeout","clearInterval","once","n","nShift","c","cShift","charactersMap","onKeyUp","useState","keys","variant","type","keyValue","onKeyDown","character","onKeyPress","setIsCapsActive","prev","setIsShiftActive","index","container","App","value","setValue","lineIsSown","setLineIsShown","useEffect","split","map","line","_","concat","slice","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fcdcbdf8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { KeyProps } from \"../types\";\r\nimport classes from \"../styles/keyboard.module.css\";\r\n// import { IoBackspaceOutline as BackspaceIcon } from \"react-icons/io5\";\r\nimport { BsShift as ShiftIcon } from \"react-icons/bs\";\r\nimport {\r\n  MdKeyboardBackspace as BackspaceIcon,\r\n  MdKeyboardTab as TabIcon,\r\n  MdKeyboardReturn as ReturnIcon,\r\n  MdKeyboardCapslock as CapsIcon,\r\n  MdSpaceBar as SpacebarIcon\r\n} from \"react-icons/md\";\r\n\r\nconst IconsMap = new Map([\r\n  [\"tab\", <TabIcon />],\r\n  [\"caps\", <CapsIcon />],\r\n  [\"shift\", <ShiftIcon />],\r\n  [\"space\", <SpacebarIcon />],\r\n  [\"enter\", <ReturnIcon />],\r\n  [\"backspace\", <BackspaceIcon />]\r\n]);\r\n\r\nconst Key: React.FC<KeyProps> = props => {\r\n  const emptyFunction = () => {};\r\n\r\n  const onDown = props.onDown || emptyFunction;\r\n  const onPress = props.onPress || emptyFunction;\r\n  const onUp = props.onUp || emptyFunction;\r\n\r\n  const className = `${classes.key} ${/tab|caps|enter|backspace/.test(\r\n    props.type\r\n  ) && classes[\"key--span-2\"]} ${/shift|space|caps/.test(props.type) &&\r\n    classes[`key--${props.type}`]} ${(props.type === \"shift\" ||\r\n    props.type === \"caps\") &&\r\n    props.isActive &&\r\n    classes[\"key--active\"]}`;\r\n\r\n  const content =\r\n    props.type === \"normal\" ? props.character : IconsMap.get(props.type);\r\n\r\n  return (\r\n    <button\r\n      className={className}\r\n      onMouseDown={() => {\r\n        /*\r\n          STEPS\r\n          1. onmousedown\r\n          2. set interaval for onmousepress\r\n          3. set a an event on the dom for mouse ups to remove the interval and excute onmouseup\r\n        */\r\n        onDown();\r\n\r\n        let onPressInterval: NodeJS.Timer;\r\n\r\n        const onPressTimeout = setTimeout(() => {\r\n          onPressInterval = setInterval(onPress, 100);\r\n        }, 500);\r\n\r\n        const onUpHanlder = () => {\r\n          clearTimeout(onPressTimeout);\r\n          clearInterval(onPressInterval);\r\n          onUp();\r\n        };\r\n\r\n        window.addEventListener(\"mouseup\", onUpHanlder, {\r\n          once: true\r\n        });\r\n      }}\r\n    >\r\n      {content}\r\n      {props.type === \"caps\" && (\r\n        <div\r\n          className={`${classes[\"key--caps__badge\"]} ${props.isActive &&\r\n            classes[\"key--caps__badge--active\"]}`}\r\n        />\r\n      )}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Key;\r\n","const n = [\r\n  \"`\",\r\n  \"1\",\r\n  \"2\",\r\n  \"3\",\r\n  \"4\",\r\n  \"5\",\r\n  \"6\",\r\n  \"7\",\r\n  \"8\",\r\n  \"9\",\r\n  \"0\",\r\n  \"-\",\r\n  \"=\",\r\n  \"backspace\",\r\n  \"tab\",\r\n  \"q\",\r\n  \"w\",\r\n  \"e\",\r\n  \"r\",\r\n  \"t\",\r\n  \"y\",\r\n  \"u\",\r\n  \"i\",\r\n  \"o\",\r\n  \"p\",\r\n  \"[\",\r\n  \"]\",\r\n  \"\\\\\",\r\n  \"caps\",\r\n  \"a\",\r\n  \"s\",\r\n  \"d\",\r\n  \"f\",\r\n  \"g\",\r\n  \"h\",\r\n  \"j\",\r\n  \"k\",\r\n  \"l\",\r\n  \";\",\r\n  \"'\",\r\n  \"enter\",\r\n  \"shift\",\r\n  \"z\",\r\n  \"x\",\r\n  \"c\",\r\n  \"v\",\r\n  \"b\",\r\n  \"n\",\r\n  \"m\",\r\n  \",\",\r\n  \".\",\r\n  \"/\",\r\n  \"shift\",\r\n  \"space\"\r\n];\r\n\r\nconst nShift = [\r\n  \"~\",\r\n  \"!\",\r\n  \"@\",\r\n  \"#\",\r\n  \"$\",\r\n  \"%\",\r\n  \"^\",\r\n  \"&\",\r\n  \"*\",\r\n  \"(\",\r\n  \")\",\r\n  \"_\",\r\n  \"+\",\r\n  \"backspace\",\r\n  \"tab\",\r\n  \"Q\",\r\n  \"W\",\r\n  \"E\",\r\n  \"R\",\r\n  \"T\",\r\n  \"Y\",\r\n  \"U\",\r\n  \"I\",\r\n  \"O\",\r\n  \"P\",\r\n  \"{\",\r\n  \"}\",\r\n  \"|\",\r\n  \"caps\",\r\n  \"A\",\r\n  \"S\",\r\n  \"D\",\r\n  \"F\",\r\n  \"G\",\r\n  \"H\",\r\n  \"J\",\r\n  \"K\",\r\n  \"L\",\r\n  \":\",\r\n  `\"`,\r\n  \"enter\",\r\n  \"shift\",\r\n  \"Z\",\r\n  \"X\",\r\n  \"C\",\r\n  \"V\",\r\n  \"B\",\r\n  \"N\",\r\n  \"M\",\r\n  \"<\",\r\n  \">\",\r\n  \"?\",\r\n  \"shift\",\r\n  \"space\"\r\n];\r\n\r\nconst c = [\r\n  \"`\",\r\n  \"1\",\r\n  \"2\",\r\n  \"3\",\r\n  \"4\",\r\n  \"5\",\r\n  \"6\",\r\n  \"7\",\r\n  \"8\",\r\n  \"9\",\r\n  \"0\",\r\n  \"-\",\r\n  \"=\",\r\n  \"backspace\",\r\n  \"tab\",\r\n  \"Q\",\r\n  \"W\",\r\n  \"E\",\r\n  \"R\",\r\n  \"T\",\r\n  \"Y\",\r\n  \"U\",\r\n  \"I\",\r\n  \"O\",\r\n  \"P\",\r\n  \"[\",\r\n  \"]\",\r\n  \"\\\\\",\r\n  \"caps\",\r\n  \"A\",\r\n  \"S\",\r\n  \"D\",\r\n  \"F\",\r\n  \"G\",\r\n  \"H\",\r\n  \"J\",\r\n  \"K\",\r\n  \"L\",\r\n  \";\",\r\n  \"'\",\r\n  \"enter\",\r\n  \"shift\",\r\n  \"Z\",\r\n  \"X\",\r\n  \"C\",\r\n  \"V\",\r\n  \"B\",\r\n  \"N\",\r\n  \"M\",\r\n  \",\",\r\n  \".\",\r\n  \"/\",\r\n  \"shift\",\r\n  \"space\"\r\n];\r\n\r\nconst cShift = [\r\n  \"~\",\r\n  \"!\",\r\n  \"@\",\r\n  \"#\",\r\n  \"$\",\r\n  \"%\",\r\n  \"^\",\r\n  \"&\",\r\n  \"*\",\r\n  \"(\",\r\n  \")\",\r\n  \"_\",\r\n  \"+\",\r\n  \"backspace\",\r\n  \"tab\",\r\n  \"q\",\r\n  \"w\",\r\n  \"e\",\r\n  \"r\",\r\n  \"t\",\r\n  \"y\",\r\n  \"u\",\r\n  \"i\",\r\n  \"o\",\r\n  \"p\",\r\n  \"{\",\r\n  \"}\",\r\n  \"|\",\r\n  \"caps\",\r\n  \"a\",\r\n  \"s\",\r\n  \"d\",\r\n  \"f\",\r\n  \"g\",\r\n  \"h\",\r\n  \"j\",\r\n  \"k\",\r\n  \"l\",\r\n  \":\",\r\n  `\"`,\r\n  \"enter\",\r\n  \"shift\",\r\n  \"z\",\r\n  \"x\",\r\n  \"c\",\r\n  \"v\",\r\n  \"b\",\r\n  \"n\",\r\n  \"m\",\r\n  \"<\",\r\n  \">\",\r\n  \"?\",\r\n  \"shift\",\r\n  \"space\"\r\n];\r\n\r\nexport { n, nShift, c, cShift };\r\n","import React, { useState } from \"react\";\r\nimport Key from \"../components/Key\";\r\nimport { c, cShift, n, nShift } from \"../data/variants\";\r\nimport { KeyType, KeyProps, KeyboardProps } from \"../types\";\r\nimport classes from \"../styles/keyboard.module.css\";\r\n\r\nconst charactersMap = new Map<\"tab\" | \"enter\" | \"space\", string>([\r\n  [\"tab\", \"    \"],\r\n  [\"space\", \" \"],\r\n  [\"enter\", \"\\n\"]\r\n]);\r\n\r\nconst KeyBoard: React.FC<KeyboardProps> = ({\r\n  onKeyDown,\r\n  onKeyPress,\r\n  onKeyUp\r\n}) => {\r\n  const [isCapsActive, setIsCapsActive] = useState(false);\r\n  const [isShiftActive, setIsShiftActive] = useState(false);\r\n\r\n  // getting the variant\r\n  let variant;\r\n\r\n  if (isCapsActive) {\r\n    if (isShiftActive) variant = cShift;\r\n    else variant = c;\r\n  } else {\r\n    if (isShiftActive) variant = nShift;\r\n    else variant = n;\r\n  }\r\n\r\n  // transfering the row data into valid props\r\n  const keys = variant.map((keyValue, index) => {\r\n    const keyType = /tab|caps|shift|space|enter|backspace/.test(keyValue)\r\n      ? (keyValue as KeyType)\r\n      : \"normal\";\r\n\r\n    const props: Partial<KeyProps> = { type: keyType };\r\n\r\n    if (props.type === \"normal\") {\r\n      props.character = keyValue;\r\n      props.onDown = onKeyDown?.bind(null, {\r\n        type: \"normal\",\r\n        character: keyValue\r\n      });\r\n      props.onPress = onKeyPress?.bind(null, {\r\n        type: \"normal\",\r\n        character: keyValue\r\n      });\r\n      props.onUp = onKeyUp?.bind(null, { type: \"normal\", character: keyValue });\r\n    } else if (props.type === \"caps\") {\r\n      props.isActive = isCapsActive;\r\n      props.onDown = () => setIsCapsActive(prev => !prev);\r\n    } else if (props.type === \"shift\") {\r\n      props.isActive = isShiftActive;\r\n      props.onDown = () => setIsShiftActive(prev => !prev);\r\n    } else {\r\n      props.onDown = onKeyDown?.bind(null, {\r\n        type: props.type,\r\n        character:\r\n          props.type === \"backspace\" ? \"\" : charactersMap.get(props.type!)\r\n      });\r\n      props.onPress = onKeyPress?.bind(null, {\r\n        type: props.type,\r\n        character:\r\n          props.type === \"backspace\" ? \"\" : charactersMap.get(props.type!)\r\n      });\r\n    }\r\n\r\n    return <Key key={index} {...(props as KeyProps)} />;\r\n  });\r\n\r\n  return <div className={classes.container}>{keys}</div>;\r\n};\r\n\r\nexport default KeyBoard;\r\n","import React, { useEffect, useState } from \"react\";\n\nimport Keyboard from \"@yosefbeder/virtual-keyboard\";\nimport \"@yosefbeder/virtual-keyboard/dist/index.css\";\n\nconst App = () => {\n  const [value, setValue] = useState(\"\");\n  const [lineIsSown, setLineIsShown] = useState(true);\n\n  useEffect(() => {\n    setInterval(() => {\n      setLineIsShown(prev => !prev);\n    }, 500);\n  }, []);\n\n  return (\n    <>\n      <div className=\"typing-area\">\n        {`${value}${lineIsSown ? \"|\" : \"\"}`.split(\"\\n\").map(line => (\n          <pre>{line}</pre>\n        ))}\n      </div>\n      <Keyboard\n        onKeyUp={({ _, character }) => {\n          {\n            setValue(prev => prev.concat(character));\n          }\n        }}\n        onKeyDown={({ type, character }) => {\n          if (type !== \"normal\") {\n            if (type === \"backspace\") {\n              setValue(prev => prev.slice(0, -1));\n              console.log(\"backspace-button\");\n            } else {\n              setValue(prev => prev.concat(character));\n            }\n          }\n        }}\n        onKeyPress={({ type, character }) => {\n          if (type !== \"normal\") {\n            if (type === \"backspace\") {\n              setValue(prev => prev.slice(0, -1));\n              console.log(\"backspace-button\");\n            } else {\n              setValue(prev => prev.concat(character));\n            }\n          } else {\n            setValue(prev => prev.concat(character));\n          }\n        }}\n      />\n    </>\n  );\n};\n\nexport default App;\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}